package ma.youssefproject.dictionnaire.App;

import ma.youssefproject.dictionnaire.config.DAOFactory;
import ma.youssefproject.dictionnaire.controller.DictionnaireController;
import ma.youssefproject.dictionnaire.view.cli.InterfaceCLI;

public class Main {

    public static void main(String[] args) {

        // Cr√©ation de la factory
        DAOFactory factory = new DAOFactory();

        // Injection du DAO via le controller
        DictionnaireController controller = new DictionnaireController(factory.getMotDAO());

        // Injection du controller dans la vue
        InterfaceCLI cli = new InterfaceCLI(controller);

        cli.menuDemmarage();


        /*
         * ‚ö° Importance de l'injection en architecture MVC :
         *
         * 1Ô∏è‚É£ S√©paration claire des responsabilit√©s :
         *    - La vue n'acc√®de jamais directement au mod√®le.
         *    - Le controller orchestre les interactions entre la vue et le mod√®le.
         *
         * 2Ô∏è‚É£ Flexibilit√© et maintenance :
         *    - On peut facilement remplacer le DAO ou le controller par une autre
         *      impl√©mentation sans modifier le reste de l'application.
         *
         * 3Ô∏è‚É£ Testabilit√© am√©lior√©e :
         *    - On peut injecter des objets factices (mock) pour les tests unitaires,
         *      sans avoir besoin d'une vraie base de donn√©es ou d'une interface utilisateur.
         *
         * 4Ô∏è‚É£ R√©duction des d√©pendances fortes :
         *    - Main n'a plus besoin de conna√Ætre les d√©tails de la cr√©ation des objets
         *      (connexion DB, DAO, etc.), ce qui rend le code plus propre et modulable.
         *
         * üîπ En r√©sum√©, l‚Äôinjection permet de respecter les principes MVC et facilite
         *    l‚Äô√©volution, le test et la maintenance du projet.
         */
    }
}
